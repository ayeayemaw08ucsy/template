package com.bbi.fam.utils;

import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Comparator;
import java.util.Base64.Decoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageConfig;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

@Configuration
@PropertySource("classpath:/application.properties")
public class ImageWriter {
	
	@Value("${img.path}")
	public static String path;
	
	static Properties properties = new Properties();
	static String propertiesFileName = "application.properties";
	static String pic_folder = "/Picture";
	static String qr_folder = "/QR";
	
	private static final String ext = ".png";
    private static final int WIDTH = 300;
    private static final int HEIGHT = 300;
	

	public static void writeRequestAndResponse(String prodRefId, String imageSrc, String pic_path, String pic_name) {
		
		//String img = "";
		Decoder decoder;
		byte[] fixed_asset_img = null ;
		
		InputStream inputStream = ImageWriter.class.getClassLoader().getResourceAsStream(propertiesFileName);
		try {
			properties.load(inputStream);
		} catch (IOException e) {
			e.printStackTrace();
		}

		String imgBase = properties.getProperty("img.path");
		/*File theDir = new File(imgBase + prodRefId + pic_folder);*/
		/*String path = imgBase + prodRefId + pic_folder + "/" + "fixed-asset-1.jpeg";*/
		File theDir = new File(pic_path);
		decoder = Base64.getDecoder();
		fixed_asset_img = decoder.decode(imageSrc);
		System.out.println("creating directory: " + theDir.getName());
		System.out.println("imageSrc : " + imageSrc);
		
		if (!theDir.exists()) {			
			boolean result = false;
			try {
				theDir.mkdirs();
				result = true;				
				drawPicture(fixed_asset_img, pic_name);
			    
			} catch (SecurityException se) {
				System.out.println(se.getMessage());
			}
			if (result) {
				System.out.println("Folder created");
			}
		} else if (theDir.exists()) {

			System.out.println("Folder exist");
			System.out.println("fixed_asset_img " + fixed_asset_img);
			System.out.println("pic_name " + pic_name);
			drawPicture(fixed_asset_img, pic_name);
			
		}

	}

	public static void drawPicture(byte[] array, String pic_name) { 
		
	    try { 	    	
	        FileOutputStream stream = new FileOutputStream(pic_name); 
			stream.write(array);
			
	    } catch (FileNotFoundException e) { 
	        e.printStackTrace(); 
	        
	    } catch (IOException e) {
			e.printStackTrace();
		} 
	} 
	
	public static void generate(String prodRef) {
        // Create new configuration that specifies the error correction
        Map<EncodeHintType, ErrorCorrectionLevel> hints = new HashMap<>();
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
        QRCodeWriter writer = new QRCodeWriter();
        BitMatrix bitMatrix = null;
        ByteArrayOutputStream os = new ByteArrayOutputStream();

        try {
            // init directory
        	String folderDir = path + "/" + prodRef + "/QR/"; 
            cleanDirectory(folderDir);
            initDirectory(folderDir);
            // Create a qr code with the url as content and a size of WxH px
            bitMatrix = writer.encode(prodRef, BarcodeFormat.QR_CODE, WIDTH, HEIGHT, hints);

            // Load QR image
            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix, getMatrixConfig());

            // Load logo image
            Resource resource = new ClassPathResource("/images/logo.png");
            BufferedImage overly = getOverly(resource.getFile().getAbsolutePath());

            // Calculate the delta height and width between QR code and logo
            int deltaHeight = qrImage.getHeight() - overly.getHeight();
            int deltaWidth = qrImage.getWidth() - overly.getWidth();

            // Initialize combined image
            BufferedImage combined = new BufferedImage(qrImage.getHeight(), qrImage.getWidth(), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = (Graphics2D) combined.getGraphics();

            // Write QR code to new image at position 0/0
            g.drawImage(qrImage, 0, 0, null);
            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));

            // Write logo into combine image at position (deltaWidth / 2) and
            // (deltaHeight / 2). Background: Left/Right and Top/Bottom must be
            // the same space for the logo to be centered
            g.drawImage(overly, (int) Math.round(deltaWidth / 2), (int) Math.round(deltaHeight / 2), null);

            // Write combined image as PNG to OutputStream
            ImageIO.write(combined, "png", os);
            // Store Image
            Files.copy( new ByteArrayInputStream(os.toByteArray()), Paths.get(folderDir + generateRandoTitle(new Random(), 9) +ext), StandardCopyOption.REPLACE_EXISTING);

        } catch (WriterException e) {
            e.printStackTrace();
            //LOG.error("WriterException occured", e);
        } catch (IOException e) {
            e.printStackTrace();
            //LOG.error("IOException occured", e);
        }
    }

    private static BufferedImage getOverly(String LOGO) throws IOException {
        File url = new File(LOGO);
        return ImageIO.read(url);
    }

    private static void initDirectory(String DIR) throws IOException {
        Files.createDirectories(Paths.get(DIR));
    }

    private static void cleanDirectory(String DIR) {
        try {
            Files.walk(Paths.get(DIR), FileVisitOption.FOLLOW_LINKS)
                    .sorted(Comparator.reverseOrder())
                    .map(Path::toFile)
                    .forEach(File::delete);
        } catch (IOException e) {
            // Directory does not exist, Do nothing
        }
    }

    private static MatrixToImageConfig getMatrixConfig() {
        // ARGB Colors
        // Check Colors ENUM
        return new MatrixToImageConfig(QRCodeGenerator.Colors.BLACK.getArgb(), QRCodeGenerator.Colors.WHITE.getArgb());
    }

    private static String generateRandoTitle(Random random, int length) {
        return random.ints(48, 122)
                .filter(i -> (i < 57 || i > 65) && (i < 90 || i > 97))
                .mapToObj(i -> (char) i)
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
                .toString();
    }

    public enum Colors {

        BLUE(0xFF40BAD0),
        RED(0xFFE91C43),
        PURPLE(0xFF8A4F9E),
        ORANGE(0xFFF4B13D),
        WHITE(0xFFFFFFFF),
        BLACK(0xFF000000);

        private final int argb;

        Colors(final int argb){
            this.argb = argb;
        }

        public int getArgb(){
            return argb;
        }
    }

//	public static void main(String[] args) {
//		writeRequestAndResponse("1236", "", "", "");
//	}

}
